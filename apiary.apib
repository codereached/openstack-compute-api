FORMAT: 1A

# OpenStack Compute API vNext

This repository contains a single document (this one) describing a proposed new
OpenStack Compute API. I've used [API Blueprint](http://apiblueprint.org/)
for formatting and describing the proposed API.

## Philosophy and Style

This proposed API follows a few guiding principles and style conventions:

 - All API routes and allowed methods are discoverable
 - All request and response payload schemas are discoverable
 - No API extensions
 - No driver implementation leaked into the API
 - No XML
 - Semantic versioning shall be enforced for any change to the vNext API
   contract
 - No use of a separate `GET /$resource/detail` route for "extra" information
   about a resource
 - Asynchronous creation and task callbacks for expensive resources
 - Removal of any part of the V2 and V3 Compute APIs that doesn't involve
   Compute functionality

### API Route Discoverability

Any route in the Compute API should be discoverable via a JSON-Home document
that is returned on a GET of the root "/" URI. This JSON-Home document should
describe the URI routes and route templates for the entire API, including
a mapping of allowed parameters in the URI template and allowed HTTP methods
for each route.

### Request and Response Payload Schema Discoverability

Each request and response payload should have a schema that is discoverable
so that clients (machine and human) can determine what is expected for each
API route.

### No API Extensions

There will be zero API extensions in the vNext Compute API.

### No Implementation in API

Under no circumstances should any underlying choice of hypervisor, network
vendor or driver, or storage vendor or driver be exposed to the consumer
of the Compute API.

### No XML

JSON shall be the only transport format for requests and responses in the
vNext Compute API. This will dramatically reduce the overall footprint of
the API controller and input validation layer in Nova.

### Semantic Versioning

Any code that introduces any change to the vNext API shall increment the
semantic versioning of the API. Non-backwards-compatible changes shall
force a new major version of the API. Backwards-compatible changes shall
introduce a minor version increment of the current API. Clients should be
able to incorporate new functionality using semver checks.

### No Extraneous "detail" Non-resource

There will be no separate `GET /$resource/detail` URIs that return "extra"
information about a resource. Where appropriate, in order to accomodate
tooling that needs to efficiently check for status or existence of a resource,
and does not need all information about a resource, a `HEAD /$resource` method
shall be provided.

### Asynchronous Creation and Task Callbacks

All expensive operations and resource creations shall be handled using
asynchronous creation calls (returning a `202 Accepted`) that return a
self-describing link that can be used by the client to call back to the
API for status information about the expensive operation.

### Compute and Compute-only

As the OpenStack project has evolved, various parts of the original Nova API
have been replaced by separate service endpoints in Keystone, Glance, Nova,
and Cinder.

The vNext Compute API does not expose **any** "translation" resources, where
the Compute API is essentially being a proxy between Nova and these other
endpoints.

This API strictly focuses on the resources and actions central to a Compute
API. It is expected that clients directly call the other OpenStack API
endpoints to request or perform actions related to those other services.

## API Conventions

There are a number of common conventions used throughout the API documentation.
We include them here to avoid having to repeat sections in the specification.

### Common HTTP Return Codes

#### 400 Bad Request

A `400 Bad Request` shall be returned under the following conditions:

 - The payload of a request was malformed
 - The payload of a request contained invalid or improper input
 - The payload of a request contained references to non-existing entities

#### 401 Unauthorized

A `401 Unauthorized` shall be returned when a requesting user was not
authenticated by the authenticating service (typically, OpenStack Identity)

#### 403 Forbidden

A `403 Forbidden` shall be returned when the requesting user does not
have permission to perform the requested action.

#### 404 Not Found

A `404 Not Found` shall be returned when any of the following conditions occur:

 - The URL requested is not found in the API route map
 - The requested URL was valid, but the entity does not exist
 - The requested URL was valid, but the entity was not owned or shared with the
   requesting user

#### 501 Not Implemented

A `501 Not Implemented` shall be returned when the OpenStack Compute service
does not provide the facility required.

# Group OpenStack Compute API Root

## GET /

Retrieve a JSON Home document that describes the OpenStack Compute API.

> **Note:** For information about JSON-Home, please see the
> [online specification](http://tools.ietf.org/html/draft-nottingham-json-home-03)

+ Response 200 (application/json-home)

```json
{
    "resources": {
        "rel/project": {
            "href-template": "/projects/{project_id}",
            "href-vars": {
                "project_id": "param/project_id"
            },
            "hints": {
                "allow": ["GET"],
                "formats": {
                    "application/json": {}
                }
            }
        },
        "rel/server_type": {
            "href-template": "/server_types/{server_type_id}",
            "href-vars": {
                "server_type_id": "param/server_type_id"
            },
            "hints": {
                "allow": ["GET"],
                "formats": {
                    "application/json": {}
                }
            }
        },
        "rel/server_type_by_name": {
            "href-template": "/server_types/{server_type_name}",
            "href-vars": {
                "server_type_name": "param/server_type_name"
            },
            "hints": {
                "allow": ["GET"],
                "formats": {
                    "application/json": {}
                }
            }
        },
        "rel/server_types": {
            "href-template": "/server_types"
                             "?{limit,marker,tag}",
            "href-vars": {
                "limit": "param/limit",
                "marker": "param/marker",
                "tag": "param/tag"
            },
            "hints": {
                "allow": ["GET", "POST"],
                "formats": {
                    "application/json": {}
                }
            }
        },
        "rel/server_group": {
            "href-template": "/server_groups/{server_group_id}",
            "href-vars": {
                "server_group_id": "param/server_group_id"
            },
            "hints": {
                "allow": ["GET"],
                "formats": {
                    "application/json": {}
                }
            }
        },
        "rel/project_server_group": {
            "href-template": "/project/{project_id}/server_groups/{server_group_slug}",
            "href-vars": {
                "project_id": "param/project_id",
                "server_group_slug": "param/server_group_slug"
            },
            "hints": {
                "allow": ["GET"],
                "formats": {
                    "application/json": {}
                }
            }
        },
        "rel/project_server_groups": {
            "href-template": "/project/{project_id}/server_groups"
                             "?{limit,marker,tag}",
            "href-vars": {
                "project_id": "param/project_id",
                "limit": "param/limit",
                "marker": "param/marker",
                "tag": "param/tag"
            },
            "hints": {
                "allow": ["GET", "POST"],
                "formats": {
                    "application/json": {}
                }
            }
        }
        "rel/server_task": {
            "href-template": "/server_tasks/{server_task_id}",
            "href-vars": {
                "server_task_id": "param/server_task_id"
            },
            "hints": {
                "allow": ["GET"],
                "formats": {
                    "application/json": {}
                }
            }
        },
        "rel/project_server_tasks": {
            "href-template": "/project/{project_id}/tasks",
                             "?(limit,marker,since}",
            "href-vars": {
                "project_id": "param/project_id",
                "limit": "param/limit",
                "marker": "param/marker",
                "since": "param/since"
            },
            "hints": {
                "allow": ["GET", "POST"],
                "formats": {
                    "application/json": {}
                }
            }
        },
        "rel/server": {
            "href-template": "/servers/{server_id}",
            "href-vars": {
                "server_id": "param/server_id"
            },
            "hints": {
                "allow": ["GET", "HEAD"],
                "formats": {
                    "application/json": {}
                }
            }
        },
        "rel/server_console_log": {
            "href-template": "/servers/{server_id}/console_log"
                             "?(offset,bytes)",
            "href-vars": {
                "server_id": "param/server_id",
                "offset": "param/offset",
                "bytes": "param/bytes"
            },
            "hints": {
                "allow": ["GET"],
                "formats": {
                    "application/json": {}
                }
            }
        },
        "rel/project_server": {
            "href-template": "/project/{project_id}/servers/{server_hostname}",
            "href-vars": {
                "project_id": "param/project_id",
                "server_hostname": "param/server_hostname"
            },
            "hints": {
                "allow": ["GET"],
                "formats": {
                    "application/json": {}
                }
            }
        },
        "rel/project_servers": {
            "href-template": "/project/{project_id}/servers"
                             "?{limit,marker}",
            "href-vars": {
                "project_id": "param/project_id",
                "limit": "param/limit",
                "marker": "param/marker"
            },
            "hints": {
                "allow": ["GET", "POST"],
                "formats": {
                    "application/json": {}
                }
            }
        }
    }
}
```

# Group Project

A project is a grouping of related server resources.

## GET /projects/{id}

Retrieve links to project resource by a project's *id*.

+ Parameters
    + id (string, `a7728150-a34f-11e3-a5e2-0800200c9a66`) ... A UUID identifier
      for the project.

+ Response 200 (application/json)
    
```json
{
    "_links": {
        "rel/project_servers": {
            "href": "/projects/a7728150-a34f-11e3-a5e2-0800200c9a66/servers"
        }
    }
}
```

# Group Server Type

A server type describes the capacity and capabilities of a class of servers.

## POST /server_types

Create a new server type.

When creating a server type, you can specify a number of attributes:

 - `name` (required, string, `custom.xlarge`) ... A short name for the
   server type.
 - `description` (optional, string, `My cool type`) ... Longer description
   of the server type.
 - `spec.memory_mb` (required, number, `32768`) ... Number of megabytes memory
   allocated to servers with this type.
 - `spec.root_disk_gb` = `10` (optional, number, `100`) ... Number of gigabytes
   to allocate for the root disk.
 - `spec.cpu_units` (required, number, `12`) ... Number of CPU units that
   servers with this type will be allocated.
 - `spec.rxtx_factor` (optional, number, `2.0` ... The throttling factor for
   I/O on servers launched with this type.
 - `spec.swap_mb` (optional, number, `32768`) ... Amount of swap space to
   allocate for servers launched with this type.
 - `tags` (optional, list of strings) ... List of strings to tag the type
   with.
 - `visibility` = `PRIVATE` (optional, string) ... Indicates whether a
   server type is publicly visible or privately shared among a group
   of users or projects. See discussion of visibility choices below.

The *visibility* attribute can be one of the following:

 - `PUBLIC` ... Anyone can see this type when listing server types.
 - `PRIVATE` ... The creating user and any user or project they share the
   type with can see this type when listing server types.

> **Note**: Many deployments of OpenStack Compute will choose not to allow
> regular users to create server types with a visibility of `PUBLIC`, and
> if a regular user tries to issue a create of a publicly-visible server
> type, the API shall return a `403 Forbidden`

+ Request (application/json)

```json
{
    "description": "A good enough server type",
    "name": "good.enough",
    "share": {
        "user_id": [
            "781247cf-7bec-4e84-86ea-3cbcee48ae6d",
            "60536efb-2e6e-4efc-9d39-fe8113292e52"
        ],
        "project_id": [
            "fd2ab3c0-d822-437f-b956-9e60e7d0fb69"
        ]
    },
    "spec": {
        "memory_mb": 1024,
        "root_disk_gb": 8,
        "cpu_units": 2,
        "rxtx_factor": 1.0,
        "swap_mb": 2048
    },
    "visibility": "PRIVATE"
}
```

+ Response 201 (application/json)
    
```json
{
    "description": "A good enough server type"
    "id": "7220d0e6-b5c6-451e-b611-27254acf2a77",
    "name": "good.enough",
    "share": {
        "user_id": [
            "781247cf-7bec-4e84-86ea-3cbcee48ae6d",
            "60536efb-2e6e-4efc-9d39-fe8113292e52"
        ],
        "project_id": [
            "fd2ab3c0-d822-437f-b956-9e60e7d0fb69"
        ]
    },
    "spec": {
        "memory_mb": 1024,
        "root_disk_gb": 8,
        "cpu_units": 2,
        "rxtx_factor": 1.0,
        "swap_mb": 2048
    },
    "tags": [],
    "visibility": "PRIVATE",
    "_links":  {
        "self": {
            "href": "/server_types/7220d0e6-b5c6-451e-b611-27254acf2a77"
        }
    }
}
```

## GET /server_types/{id}

Retrieve a server type by its *id*.

+ Parameters
    + id (string, `7a6aba30-a3c0-11e3-a5e2-0800200c9a66`) ... A UUID identifier
      for the server type

+ Response 200 (application/json)
    
```json
{
    "description": "General purpose low-CPU, low-memory, "
                   "small-root-disk type of server.",
    "id": "7a6aba30-a3c0-11e3-a5e2-0800200c9a66",
    "name": "m1.micro",
    "share": {},
    "spec": {
        "memory_mb": 128,
        "root_disk_gb": 8,
        "cpu_units": 1,
        "rxtx_factor": 1.0,
        "swap_mb": 128
    },
    "tags": [
        "general-purpose"
    ],
    "visibility": "PUBLIC",
    "_links":  {
        "self": {
            "href": "/server_types/7a6aba30-a3c0-11e3-a5e2-0800200c9a66"
        }
    }
}
```

## GET /server_types/{name}

Retrieve a server type by its *name*.

+ Parameters
    + name (string, `m1.micro`) ... A unique name identifier of the server type

+ Response 200 (application/json)
    
```json
{
    "description": "General purpose low-CPU, low-memory, "
                   "small-root-disk type of server.",
    "id": "7a6aba30-a3c0-11e3-a5e2-0800200c9a66",
    "name": "m1.micro",
    "share": {},
    "spec": {
        "memory_mb": 128,
        "root_disk_gb": 8,
        "cpu_units": 1,
        "rxtx_factor": 1.0,
        "swap_mb": 128
    },
    "tags": [
        "general-purpose"
    ],
    "visibility": "PUBLIC",
    "_links":  {
        "self": {
            "href": "/server_types/7a6aba30-a3c0-11e3-a5e2-0800200c9a66"
        }
    }
}
```

## GET /server_types{?limit,marker,tag}

Retrieve a collection of server types.

> **Note**: The server types returned by this call include all publicly-visible
> server types, any server types created by the requesting user, and any server
> types shared with the requesting user.

+ Parameters
    + limit = `20` (optional, number) ... Maximum number of results to return
    + marker (optional, string, `1593e080-a354-11e3-a5e2-0800200c9a66`) ... A UUID
      identifier of the last record on the previous page of results.
    + tag (optional, multiple string, `general-purpose`) ... Filters the results on
      server types with any matching tag.

+ Response 200 (application/json)

```json
{
    "server_types": [
        {
            "description": "General purpose low-CPU, low-memory, "
                           "small-root-disk type of server.",
            "id": "7a6aba30-a3c0-11e3-a5e2-0800200c9a66",
            "name": "m1.micro",
            "share": {},
            "spec": {
                "memory_mb": 128,
                "root_disk_gb": 8,
                "cpu_units": 1,
                "rxtx_factor": 1.0,
                "swap_mb": 128
            },
            "tags": [
                "general-purpose"
            ],
            "visibility": "PUBLIC",
            "_links":  {
                "self": {
                    "href": "/server_types/7a6aba30-a3c0-11e3-a5e2-0800200c9a66"
                }
            }
        },
        {
            "description": "CPU-intensive, high-memory, "
                           "small-root-disk type of server.",
            "id": "1593e080-a354-11e3-a5e2-0800200c9a66",
            "name": "c1.xlarge",
            "share": {},
            "spec": {
                "memory_mb": 32768,
                "root_disk_gb": 8,
                "cpu_units": 8,
                "rxtx_factor": 2.0,
                "swap_mb": 32768
            },
            "tags": [
                "hpc"
            ],
            "visibility": "PUBLIC",
            "_links":  {
                "self": {
                    "href": "/server_types/1593e080-a354-11e3-a5e2-0800200c9a66"
                }
            }
        }
    ],
    "_links": {
        "self": {
            "href": "/server_types?limit=2"
        },
        "next": {
            "href": "/server_types?limit=2&marker=1593e080-a354-11e3-a5e2-0800200c9a66"
        }
    }
}
```

# Group Server Group

A server group is a *user-defined* collection of servers that provides defaults
for servers launched in the group.

## POST /projects/{project}/server_groups

Create a new server group within a project.

A server group has a required *name* and an optional *description*, both string
values. The name attribute is "slugified" on creation and can be used to
retrieve the server group by an easy-to-remember name instead of a UUID (see
below for the `GET /projects/{project}/server_groups/{slug}` call signature).

The *defaults* attribute is a dictionary of attributes that are used as default
values when launching servers in the group. Possible keys in the defaults
dictionary include:

 - `defaults.template_id` (string, UUID) ... The UUID of the server template to
   use as a default when launching servers in this group.
 - `defaults.type_id` (string, UUID) ... The UUID of the server type to use
   by default when launching servers in this group.
 - `defaults.hostname_pattern` (string, regex) ... A regex expression that may
   be used to define hostnames for multiple servers launched in this group. The
   `%(rand_name)d` symbol is interpolated as a random number. You can limit the
   number of digits by specifying a length, like so: `%(rand_num)5d`.

In addition to the above, a server group may be tagged with zero or more
strings.

+ Parameters
    + project (string, `a7728150-a34f-11e3-a5e2-0800200c9a66`) ... A UUID identifier
      for the project.

+ Request (application/json)

```json
{
    "description": "Application servers running Windows Server 2008 R2",
    "defaults": {
        "template_id": "fe48b370-a352-11e3-a5e2-0800200c9a66",
        "type_id": "96d639b0-a3ca-11e3-a5e2-0800200c9a66",
        "hostname_pattern": "win-app-%(rand_num)5d"
    },
    "name": "Windows App servers",
    "tags": [
        "windows"
    ]
}
```

+ Response 201 (application/json)

```json
{
    "description": "Application servers running Windows Server 2008 R2",
    "defaults": {
        "template_id": "fe48b370-a352-11e3-a5e2-0800200c9a66",
        "type_id": "96d639b0-a3ca-11e3-a5e2-0800200c9a66",
        "hostname_pattern": "win-app-%(rand_num)5d"
    },
    "id": "5f634509-ee40-4406-9c45-e5f343f01f62",
    "name": "Windows App servers",
    "project_id": "a7728150-a34f-11e3-a5e2-0800200c9a66",
    "slug": "windows-app-servers",
    "tags": [
        "windows"
    ],
    "_links":  {
        "self": {
            "href": "/server_groups/5f634509-ee40-4406-9c45-e5f343f01f62"
        }
    }
}
```

## GET /server_groups/{id}

Retrieve a server group by its *id*.

+ Parameters
    + id (string, `5f634509-ee40-4406-9c45-e5f343f01f62`) ... A UUID identifier
      for the server group

+ Response 200 (application/json)
    
```json
{
    "description": "Application servers running Windows Server 2008 R2",
    "defaults": {
        "template_id": "fe48b370-a352-11e3-a5e2-0800200c9a66",
        "type_id": "96d639b0-a3ca-11e3-a5e2-0800200c9a66",
        "hostname_pattern": "win-app-%(rand_num)5d"
    },
    "id": "5f634509-ee40-4406-9c45-e5f343f01f62",
    "name": "Windows App servers",
    "project_id": "a7728150-a34f-11e3-a5e2-0800200c9a66",
    "slug": "windows-app-servers",
    "tags": [
        "windows"
    ],
    "_links":  {
        "self": {
            "href": "/server_groups/5f634509-ee40-4406-9c45-e5f343f01f62"
        }
    }
}
```

## GET /projects/{project}/server_groups/{slug}

Retrieve a server group within a *project* by its *slug*.

+ Parameters
    + project (string, `a7728150-a34f-11e3-a5e2-0800200c9a66`) ... A UUID identifier
      for the project.
    + slug (string, `windows-app-servers`) ... A slugified name of the server group

+ Response 200 (application/json)
    
```json
{
    "description": "Application servers running Windows Server 2008 R2",
    "defaults": {
        "template_id": "fe48b370-a352-11e3-a5e2-0800200c9a66",
        "type_id": "96d639b0-a3ca-11e3-a5e2-0800200c9a66",
        "hostname_pattern": "win-app-%(rand_num)5d"
    },
    "id": "5f634509-ee40-4406-9c45-e5f343f01f62",
    "name": "Windows App servers",
    "project_id": "a7728150-a34f-11e3-a5e2-0800200c9a66",
    "slug": "windows-app-servers",
    "tags": [
        "windows"
    ],
    "_links":  {
        "self": {
            "href": "/server_groups/5f634509-ee40-4406-9c45-e5f343f01f62"
        }
    }
}
```

## GET /projects/{project}/server_groups{?limit,marker,tag}

Retrieve a collection of server groups.

+ Parameters
    + project (string, `a7728150-a34f-11e3-a5e2-0800200c9a66`) ... A UUID identifier
      for the project.
    + limit = `20` (optional, number) ... Maximum number of results to return
    + marker (optional, string, `1593e080-a354-11e3-a5e2-0800200c9a66`) ... A UUID
      identifier of the last record on the previous page of results.
    + tag (optional, multiple string, `general-purpose`) ... Filters the results on
      server groups with any matching tag.

+ Response 200 (application/json)

```json
{
    "server_groups": [
        {
            "description": "Application servers running Windows Server 2008 R2",
            "defaults": {
                "template_id": "fe48b370-a352-11e3-a5e2-0800200c9a66",
                "type_id": "96d639b0-a3ca-11e3-a5e2-0800200c9a66",
                "hostname_pattern": "win-app-%(rand_num)5d"
            },
            "id": "5f634509-ee40-4406-9c45-e5f343f01f62",
            "name": "Windows App servers",
            "project_id": "a7728150-a34f-11e3-a5e2-0800200c9a66",
            "slug": "windows-app-servers",
            "tags": [
                "windows"
            ],
            "_links":  {
                "self": {
                    "href": "/server_groups/5f634509-ee40-4406-9c45-e5f343f01f62"
                }
            }
        },
        {
            "description": "Database servers running PostgreSQL 9.1",
            "defaults": {
                "template_id": "af2eda95-9a35-49c6-a90e-0fdd60686309",
                "type_id": "1593e080-a354-11e3-a5e2-0800200c9a66",
                "hostname_pattern": "pgdb-%(rand_num)1d"
            },
            "id": "b84cb239-e3a8-49c4-b601-90ed8423cb93",
            "name": "PostgreSQL servers",
            "project_id": "a7728150-a34f-11e3-a5e2-0800200c9a66",
            "slug": "postgresql-servers",
            "tags": [
                "database",
                "postgresql"
            ],
            "_links":  {
                "self": {
                    "href": "/server_groups/b84cb239-e3a8-49c4-b601-90ed8423cb93"
                }
            }
        },
    ]
    "_links": {
        "self": {
            "href": "/projects/a7728150-a34f-11e3-a5e2-0800200c9a66/server_groups?limit=2"
        },
        "next": {
            "href": "/projects/a7728150-a34f-11e3-a5e2-0800200c9a66/server_groups?limit=2&marker=1593e080-a354-11e3-a5e2-0800200c9a66"
        }
    }
}
```

# Group Server Task

A server task is a related set of actions that are or have been executed
against a server.

Each server task has a *state* attribute. This attribute is a string with
one of the following values:

 - `RUNNING`
 - `ABORTED`
 - `COMPLETED`
 - `TIMED_OUT`

Each server task contains an *action* attribute. This attribute is a string
with one of the following values:

 - `CREATE`
 - `SNAPSHOT`
 - `BACKUP`
 - `UPDATE_PASSWORD`
 - `RESIZE`
 - `REBOOT`
 - `HARD_REBOOT`
 - `PAUSE`
 - `UNPAUSE`
 - `SUSPEND`
 - `RESUME`
 - `POWER_OFF`
 - `POWER_ON`
 - `RESCUE`
 - `UNRESCUE`
 - `REBUILD`
 - `MOVE`
 - `TERMINATE`
 - `RESTORE`
 - `SHELVE`
 - `SHELVE_OFFLOAD`
 - `UNSHELVE`
 - `ATTACH_BLOCK_DEVICE`
 - `DETACH_BLOCK_DEVICE`

## POST /servers/{server}/tasks

Starts a task against a *server*.

> **Note**: Any action listed in the Server Task section may be specified
> except `CREATE`. When a server is launched with the 
> `POST /projects/{project}/servers` call, Nova will add a Server Task to the
> server for the `CREATE` action.

+ Parameters
    + server (string, `a7728150-a34f-11e3-a5e2-0800200c9a66`) ... A UUID identifier
      for the server.

+ Request (application/json)

```json
{
    "action": "REBOOT",
    "timeout": 120
}
```

+ Response 202 (application/json)

```json
{
    "action": "REBOOT",
    "created_at": "2014-04-14T02:15:15Z",
    "created_by": "c54b5b30-a353-11e3-a5e2-0800200c9a66",
    "id": "85fc465a-8809-4b7a-bce2-4c6ff5b78763",
    "server_id": "53626cb0-a34f-11e3-a5e2-0800200c9a66",
    "state": "RUNNING",
    "_links":  {
        "self": {
            "href": "/server_tasks/53626cb0-a34f-11e3-a5e2-0800200c9a66"
        },
        "rel/server_task_subtasks": {
            "href": "/server_tasks/53626cb0-a34f-11e3-a5e2-0800200c9a66/subtasks"
        }
    }
}
```

## GET /server_tasks/{id}

Retrieve a server task by its *id*.

+ Parameters
    + id (string, `85fc465a-8809-4b7a-bce2-4c6ff5b78763`) ... A UUID identifier
      for the server task

+ Response 200 (application/json)
    
```json
{
    "action": "CREATE",
    "created_at": "2014-04-14T02:15:15Z",
    "created_by": "c54b5b30-a353-11e3-a5e2-0800200c9a66",
    "id": "85fc465a-8809-4b7a-bce2-4c6ff5b78763",
    "server_id": "53626cb0-a34f-11e3-a5e2-0800200c9a66",
    "state": "RUNNING",
    "_links":  {
        "self": {
            "href": "/server_tasks/53626cb0-a34f-11e3-a5e2-0800200c9a66"
        },
        "rel/server_task_subtasks": {
            "href": "/server_tasks/53626cb0-a34f-11e3-a5e2-0800200c9a66/subtasks"
        }
    }
}
```

## GET /servers/{server}/tasks{?limit,marker,since}

Retrieve a collection of servers in a specific *project*.

> **Note**: The entire collection of tasks for a server represents the full
> history of actions taken against the server through the OpenStack Compute
> API.

+ Parameters
    + server (string, `a7728150-a34f-11e3-a5e2-0800200c9a66`) ... A UUID identifier
      for the server.
    + limit = `20` (optional, number) ... Maximum number of results to return
    + marker (optional, string, `3699f74d-af95-406d-b38e-d2b86f84a9d0`) ... A UUID
      identifier of the last record on the previous page of results.
    + since (optional, datetime, `2013-12-23T10:02:42Z`) ... An ISO-8601 datetime
      to filter tasks that were started after that time.

+ Response 200 (application/json)

```json
{
    "tasks": [
        {
            "action": "CREATE",
            "created_at": "2014-04-14T02:15:15Z",
            "created_by": "c54b5b30-a353-11e3-a5e2-0800200c9a66",
            "id": "85fc465a-8809-4b7a-bce2-4c6ff5b78763",
            "server_id": "53626cb0-a34f-11e3-a5e2-0800200c9a66",
            "state": "RUNNING",
            "_links":  {
                "self": {
                    "href": "/server_tasks/85fc465a-8809-4b7a-bce2-4c6ff5b78763"
                },
                "rel/server_task_subtasks": {
                    "href": "/server_tasks/85fc465a-8809-4b7a-bce2-4c6ff5b78763/subtasks"
                }
            }
        },
        {
            "action": "RESIZE",
            "created_at": "2013-12-23T10:02:42Z",
            "created_by": "c54b5b30-a353-11e3-a5e2-0800200c9a66",
            "id": "3759ef44-2b7d-4981-b286-418ca50fe005",
            "server_id": "53626cb0-a34f-11e3-a5e2-0800200c9a66",
            "state": "ABORTED",
            "_links":  {
                "self": {
                    "href": "/server_tasks/3759ef44-2b7d-4981-b286-418ca50fe005"
                },
                "rel/server_task_subtasks": {
                    "href": "/server_tasks/3759ef44-2b7d-4981-b286-418ca50fe005/subtasks"
                }
            }
        }
    ],
    "_links": {
        "self": {
            "href": "/servers/53626cb0-a34f-11e3-a5e2-0800200c9a66/tasks?limit=2"
        },
        "next": {
            "href": "/servers/53626cb0-a34f-11e3-a5e2-0800200c9a66/tasks?limit=2&marker=3759ef44-2b7d-4981-b286-418ca50fe005"
        }
    }
}
```

# Group Server

A server is a virtual machine that runs in an OpenStack cloud. It is owned by
a single *project*, has a single *server type* that describes its capabilities
and capacity, and is launched from a *server template* that is a base disk
image, a bootable volume, or a snapshot of another server.

The server is the main resource exposed by the OpenStack Compute API. There
are a number of subresources and collections of subresources that are
attached to a server resource. This group describes operations on the server
and these subresources.

When launched, the ID of a server template is provided. This ID is the UUID
identifier of a base disk image, a bootable volume, or a snapshot of
a server that is used as the basis of the server that is launched.

> **Note**: The OpenStack Compute API does not actually expose the server
> template resource. Server template resources are exposed by the OpenStack
> Image and OpenStack Block Storage APIs (images/ and volumes/ respectively).

Each server lives in a generic container signified by the *region_id*
attribute. Unlike the old v2/v3 Compute API, there is no concept of an
EC2 Availability Zone built into the vNext Compute API. Instead of the concept
of an availability zone, the concept of a generic region container is
introduced. Regions may or may not have other regions as children. What
SLA or failure boundaries are defined for a region is left entirely up to
the deployer of the OpenStack Compute service.

Each server has a *power_state* attribute, which is a string with one of the
following values:

 - `RUNNING`
 - `PAUSED`
 - `SHUTDOWN`
 - `CRASHED`
 - `SUSPENDED`

In addition to the power_state, each server also has a *virt_state* attribute,
which is a string with one of the following values:

 - `ACTIVE`
 - `BUILDING`
 - `PAUSED`
 - `SUSPENDED`
 - `STOPPED`
 - `RESCUED` (TODO(jaypipes): Remove this. It is not an end state)
 - `RESIZED` (TODO(jaypipes): Remove this. It is not an end state)
 - `TERMINATED`
 - `SHELVED`
 - `SHELVED_OFFLOADED`
 - `ERROR`

> **Note**: There is no DELETE operation against a server in the Compute API.
> To terminate a server, you would POST /servers/{server}/tasks with a task
> with action `TERMINATE`. Archival of terminated server information is outside
> the scope of a public OpenStack Compute control API.

## POST /project/{project}/servers

Create one or more servers in a project.

There are two main sections to the request body: *defaults* and *servers*.

The defaults section is used to set the default attributes of servers when
creating more than one server. Instead of specifying the same server group
or server type for each server you create, you can specify this once in the
defaults section.

The servers section is a list of dictionaries, one per server you want to
create. Attributes that *must* be unique for each server -- such as the
server's *hostname* attribute, can be set here, along with overrides for
attribute values where the value specified in the defaults section is not
wanted.

The request for launching one or more servers is pre-validated before
attempting to launch any of the servers. A failure response will indicate
errors that were found in this pre-validation procedure. 

A success response will always be a list of dictionaries that contain
attributes about each server that was launched:

 - `id` (string) ... The UUID of the newly-created server resource.
 - `launched_at` (datetime) ... The ISO8601 timestamp of when the launch
   task for the server was started.

> **Note**: Failure of any individual server to launch will *not* be returned
> in a failure response to this API call. Instead, a user may check the status
> of a server and a list of the server's latest task actions using calls to
> `HEAD /servers/{id}` and `GET /servers/{id}/tasks`

+ Request (application/json)

```json
{
    "defaults": {
        "group_id": "bd0bf800-a356-11e3-a5e2-0800200c9a66",
        "template_id": "fe48b370-a352-11e3-a5e2-0800200c9a66",
        "type_id": "1593e080-a354-11e3-a5e2-0800200c9a66",
        "region_id": "12aed151-2431-4bd5-8be5-7c050c4f3254",
        "keypair_id": "cffd003d-ca59-4be6-856e-054a98ac3567"
    },
    "servers": [
        {
            "hostname": "app-server-1",
            "keypair_id": "5b3866b9-77d7-4afc-a095-e400919ade97"
        },
        {
            "hostname": "app-server-2",
            "type_id": "98f5c367a-a354-11e3-a5e2-0800200c9a66"
        },
    ],
}
```

+ Response 202 (application/json)

```json
[
    {
        "id": "53626cb0-a34f-11e3-a5e2-0800200c9a66",
        "launched_at": "2014-03-02T23:20:19",
        "_links": {
            "self": {
                "href": "/servers/53626cb0-a34f-11e3-a5e2-0800200c9a66"
            },
            "rel/server_tasks": {
                "href": "/servers/53626cb0-a34f-11e3-a5e2-0800200c9a66/tasks"
            }
        }
    },
    {
        "id": "3699f74d-af95-406d-b38e-d2b86f84a9d0",
        "launched_at": "2014-03-03T03:20:19",
        "_links": {
            "self": {
                "href": "/servers/3699f74d-af95-406d-b38e-d2b86f84a9d0",
            },
            "rel/server_tasks": {
                "href": "/servers/3699f74d-af95-406d-b38e-d2b86f84a9d0/tasks",
            }
        }
    }
]
```

## /servers/{id}

+ Parameters
    + id (string, `53626cb0-a34f-11e3-a5e2-0800200c9a66`) ... A UUID identifier
      for the server

### HEAD

Retrieve a server's state by its *id*.

+ Response 200
    + Headers

            X-OpenStack-Compute-Server-Virt-State: ACTIVE
            X-OpenStack-Compute-Server-Power-State: RUNNING

### GET

Retrieve a server by its *id*.

+ Response 200 (application/json)
    
```json
{
    "block_devices": [
        {
            "id": "50795ce0-a357-11e3-a5e2-0800200c9a66",
            "type": "ephemeral",
            "device": "/dev/sda"
        },
        {
            "id": "b502f900-a357-11e3-a5e2-0800200c9a66",
            "type": "persistent",
            "device": "/dev/sdb"
        }
    ],
    "group_id": "bd0bf800-a356-11e3-a5e2-0800200c9a66",
    "hostname": "example-server-1",
    "id": "53626cb0-a34f-11e3-a5e2-0800200c9a66",
    "launch_keypair_id": "cffd003d-ca59-4be6-856e-054a98ac3567", 
    "launched_at": "2014-03-02T23:20:19",
    "launched_by": "c54b5b30-a353-11e3-a5e2-0800200c9a66",
    "networking": {
        "access": [
            "65.6.29.230",
            "::babe:65.6.29.230"
        ],
        "interfaces": {
            "eth0": {
                "ip": "10.0.1.4",
                "mac": "76:26:47:3d:9b:8a"
            },
            "eth1": {
                "ip": "65.6.29.230",
                "mac": "d1:39:55:04:ab:fb"
            }
        }
    },
    "power_state": "RUNNING",
    "project_id": "a7728150-a34f-11e3-a5e2-0800200c9a66",
    "properties": {
        "role": "appserver",
    },
    "region_id": "12aed151-2431-4bd5-8be5-7c050c4f3254",
    "size": {
        "memory_mb": 32768,
        "root_disk_gb": 8,
        "cpu_units": 8
    },
    "tags": [
        "linux",
        "ubuntu"
    ],
    "template_id": "fe48b370-a352-11e3-a5e2-0800200c9a66",
    "virt_state": "ACTIVE",
    "_links": {
        "self": {
            "href": "/servers/53626cb0-a34f-11e3-a5e2-0800200c9a66"
        },
        "rel/server_tasks": {
            "href": "/servers/53626cb0-a34f-11e3-a5e2-0800200c9a66/tasks"
        }
    }
}
```

## GET /projects/{project}/servers/{hostname}

Retrieve a server by its *project* and *hostname*.

+ Parameters
    + project (string, `a7728150-a34f-11e3-a5e2-0800200c9a66`) ... A UUID identifier
      for the project.
    + hostname (string, `app-server-1`) ... A hostname of a server in the project.

+ Response 200 (application/json)

```json
{
    "block_devices": [
        {
            "id": "50795ce0-a357-11e3-a5e2-0800200c9a66",
            "type": "ephemeral",
            "device": "/dev/sda"
        },
        {
            "id": "b502f900-a357-11e3-a5e2-0800200c9a66",
            "type": "persistent",
            "device": "/dev/sdb"
        }
    ],
    "group_id": "bd0bf800-a356-11e3-a5e2-0800200c9a66",
    "hostname": "example-server-1",
    "id": "53626cb0-a34f-11e3-a5e2-0800200c9a66",
    "launch_keypair_id": "cffd003d-ca59-4be6-856e-054a98ac3567", 
    "launched_at": "2014-03-02T23:20:19",
    "launched_by": "c54b5b30-a353-11e3-a5e2-0800200c9a66",
    "networking": {
        "access": [
            "65.6.29.230",
            "::babe:65.6.29.230"
        ],
        "interfaces": {
            "eth0": {
                "ip": "10.0.1.4",
                "mac": "76:26:47:3d:9b:8a"
            },
            "eth1": {
                "ip": "65.6.29.230",
                "mac": "d1:39:55:04:ab:fb"
            }
        }
    },
    "power_state": "RUNNING",
    "project_id": "a7728150-a34f-11e3-a5e2-0800200c9a66",
    "properties": {
        "role": "appserver",
    },
    "region_id": "12aed151-2431-4bd5-8be5-7c050c4f3254",
    "size": {
        "memory_mb": 32768,
        "root_disk_gb": 8,
        "cpu_units": 8
    },
    "tags": [
        "linux",
        "ubuntu"
    ],
    "template_id": "fe48b370-a352-11e3-a5e2-0800200c9a66",
    "virt_state": "ACTIVE",
    "_links": {
        "self": {
            "href": "/servers/53626cb0-a34f-11e3-a5e2-0800200c9a66"
        },
        "rel/server_tasks": {
            "href": "/servers/53626cb0-a34f-11e3-a5e2-0800200c9a66/tasks"
        }
    }
}
```

## GET /project/{project}/servers{?limit,marker}

Retrieve a collection of servers in a specific *project*.

+ Parameters
    + project (string, `a7728150-a34f-11e3-a5e2-0800200c9a66`) ... A UUID identifier
      for the project.
    + limit = `20` (optional, number) ... Maximum number of results to return
    + marker (optional, string, `3699f74d-af95-406d-b38e-d2b86f84a9d0`) ... A UUID
      identifier of the last record on the previous page of results.

+ Response 200 (application/json)

```json
{
    "servers": [
        {
            "group_id": "bd0bf800-a356-11e3-a5e2-0800200c9a66",
            "hostname": "example-server-1",
            "id": "53626cb0-a34f-11e3-a5e2-0800200c9a66",
            "launched_at": "2014-03-02T23:20:19",
            "launched_by": "c54b5b30-a353-11e3-a5e2-0800200c9a66",
            "power_state": "RUNNING",
            "project_id": "a7728150-a34f-11e3-a5e2-0800200c9a66",
            "region_id": "12aed151-2431-4bd5-8be5-7c050c4f3254",
            "template_id": "fe48b370-a352-11e3-a5e2-0800200c9a66",
            "type_id": "1593e080-a354-11e3-a5e2-0800200c9a66",
            "virt_state": "ACTIVE",
            "_links": {
                "self": {
                    "href": "/servers/53626cb0-a34f-11e3-a5e2-0800200c9a66"
                },
                "rel/server_tasks": {
                    "href": "/servers/53626cb0-a34f-11e3-a5e2-0800200c9a66/tasks"
                }
            }
        },
        {
            "group_id": "bd0bf800-a356-11e3-a5e2-0800200c9a66",
            "hostname": "example-server-2",
            "id": "3699f74d-af95-406d-b38e-d2b86f84a9d0"
            "launched_at": "2014-03-03T03:20:19",
            "launched_by": "c54b5b30-a353-11e3-a5e2-0800200c9a66",
            "power_state": "RUNNING",
            "project_id": "a7728150-a34f-11e3-a5e2-0800200c9a66",
            "region_id": "12aed151-2431-4bd5-8be5-7c050c4f3254",
            "template_id": "fe48b370-a352-11e3-a5e2-0800200c9a66",
            "type_id": "1593e080-a354-11e3-a5e2-0800200c9a66",
            "virt_state": "ACTIVE",
            "_links": {
                "self": {
                    "href": "/servers/3699f74d-af95-406d-b38e-d2b86f84a9d0",
                },
                "rel/server_tasks": {
                    "href": "/servers/3699f74d-af95-406d-b38e-d2b86f84a9d0/tasks",
                }
            }
        }
    ],
    "_links": {
        "self": {
            "href": "/projects/a7728150-a34f-11e3-a5e2-0800200c9a66/servers?limit=2"
        },
        "next": {
            "href": "/projects/a7728150-a34f-11e3-a5e2-0800200c9a66/servers?limit=2&marker=3699f74d-af95-406d-b38e-d2b86f84a9d0"
        }
    }
}
```

# Group Server Console Log

## GET /servers/{server}/console_log?{bytes}

Retrieve somee or part of a server console log.

+ Parameters
    + server (string, `a7728150-a34f-11e3-a5e2-0800200c9a66`) ... A UUID identifier
      for the server.
    + bytes = `65536` (optional, number) ... Maximum number of bytes to
      return.

+ Response 200 (plain/text)
    
```
Linux version 2.6.21.7-2.ec2.v1.2.fc8xen (root@domU-12-34-56-0A-78-01) (gcc version 4.1.2 20070925 (Red Hat 4.1.2-33)) #1 SMP Fri Nov 20 19:22:36 EST 2009
BIOS-provided physical RAM map:
sanitize start
sanitize bail 0
copy_e820_map() start: 0000000000000000 size: 000000006ac00000 end: 000000006ac00000 type: 1
Xen: 0000000000000000 - 000000006ac00000 (usable)
980MB HIGHMEM available.
727MB LOWMEM available.
NX (Execute Disable) protection: active
```

